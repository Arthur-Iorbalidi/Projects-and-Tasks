// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectsAndTasks.Repository;

#nullable disable

namespace ProjectsAndTasks.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20241209081658_InitialDbCreationAndSeeding")]
    partial class InitialDbCreationAndSeeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.Property<int>("ProjectsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("ProjectsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ProjectUser");
                });

            modelBuilder.Entity("ProjectsAndTasks.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("isCompleted")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete overhaul of the corporate website",
                            Name = "Website Redesign",
                            isCompleted = false
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Develop a mobile app for internal communication",
                            Name = "Mobile App Development",
                            isCompleted = false
                        },
                        new
                        {
                            Id = 3,
                            CompletionDate = new DateTime(2023, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreationDate = new DateTime(2023, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Q3 campaign for product launch",
                            Name = "Marketing Campaign Q3",
                            isCompleted = true
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2023, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Upgrade features and security in the customer portal",
                            Name = "Customer Portal Upgrade",
                            isCompleted = false
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2023, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Development of online service RDR2 Guide",
                            Name = "RDR2 Guide",
                            isCompleted = false
                        });
                });

            modelBuilder.Entity("ProjectsAndTasks.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<bool>("isCompleted")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2023, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Create design wireframes for the website",
                            Name = "Design Wireframes",
                            Priority = 1,
                            ProjectId = 1,
                            isCompleted = false
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2023, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Develop the backend for the mobile app",
                            Name = "Develop App Backend",
                            Priority = 2,
                            ProjectId = 2,
                            isCompleted = false
                        },
                        new
                        {
                            Id = 3,
                            CompletionDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreationDate = new DateTime(2023, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Execute the Q3 marketing campaign",
                            Name = "Launch Marketing Campaign",
                            Priority = 1,
                            ProjectId = 3,
                            isCompleted = true
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2023, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Enhance security features in the customer portal",
                            Name = "Upgrade Portal Security",
                            Priority = 1,
                            ProjectId = 4,
                            isCompleted = false
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Create all necessarry models",
                            Name = "Create Models on Database",
                            Priority = 1,
                            ProjectId = 5,
                            isCompleted = false
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTime(2023, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Create layout for website for all pages",
                            Name = "Create layout for website",
                            Priority = 1,
                            ProjectId = 5,
                            isCompleted = false
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTime(2024, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Create Controllers with necessary functionality",
                            Name = "Create Controllers",
                            Priority = 1,
                            ProjectId = 5,
                            isCompleted = false
                        });
                });

            modelBuilder.Entity("ProjectsAndTasks.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "arthur.iorbalidi@gmail.com",
                            Name = "Arthur",
                            Password = "1111",
                            Surname = "Iorbalidi"
                        },
                        new
                        {
                            Id = 2,
                            Email = "ilya.knmelkov@gmail.com",
                            Name = "Ilya",
                            Password = "2222",
                            Surname = "Khmelkov"
                        },
                        new
                        {
                            Id = 3,
                            Email = "alexander.yakovlev@gmail.com",
                            Name = "Alexander",
                            Password = "3333",
                            Surname = "Yakovlev"
                        },
                        new
                        {
                            Id = 4,
                            Email = "pavel.fedorov@gmail.com",
                            Name = "Pavel",
                            Password = "4444",
                            Surname = "Fedorov"
                        },
                        new
                        {
                            Id = 5,
                            Email = "nikita.kravchenko@gmail.com",
                            Name = "Nikita",
                            Password = "5555",
                            Surname = "Kravchenko"
                        },
                        new
                        {
                            Id = 6,
                            Email = "vadim.podlipny@gmail.com",
                            Name = "Vadim",
                            Password = "6666",
                            Surname = "Podlipny"
                        });
                });

            modelBuilder.Entity("ProjectsAndTasks.Models.UserProject", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("UserProjects");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            ProjectId = 1
                        },
                        new
                        {
                            UserId = 2,
                            ProjectId = 2
                        },
                        new
                        {
                            UserId = 3,
                            ProjectId = 3
                        },
                        new
                        {
                            UserId = 4,
                            ProjectId = 4
                        },
                        new
                        {
                            UserId = 5,
                            ProjectId = 4
                        },
                        new
                        {
                            UserId = 2,
                            ProjectId = 5
                        },
                        new
                        {
                            UserId = 6,
                            ProjectId = 5
                        },
                        new
                        {
                            UserId = 1,
                            ProjectId = 5
                        },
                        new
                        {
                            UserId = 3,
                            ProjectId = 2
                        },
                        new
                        {
                            UserId = 5,
                            ProjectId = 3
                        });
                });

            modelBuilder.Entity("ProjectsAndTasks.Models.UserTask", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("userTasks");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            TaskId = 1
                        },
                        new
                        {
                            UserId = 3,
                            TaskId = 2
                        },
                        new
                        {
                            UserId = 2,
                            TaskId = 2
                        },
                        new
                        {
                            UserId = 3,
                            TaskId = 3
                        },
                        new
                        {
                            UserId = 4,
                            TaskId = 4
                        },
                        new
                        {
                            UserId = 1,
                            TaskId = 5
                        },
                        new
                        {
                            UserId = 6,
                            TaskId = 5
                        },
                        new
                        {
                            UserId = 2,
                            TaskId = 5
                        },
                        new
                        {
                            UserId = 2,
                            TaskId = 7
                        },
                        new
                        {
                            UserId = 6,
                            TaskId = 7
                        });
                });

            modelBuilder.Entity("TaskUser", b =>
                {
                    b.Property<int>("TasksId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("TasksId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("TaskUser");
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.HasOne("ProjectsAndTasks.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectsAndTasks.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectsAndTasks.Models.Task", b =>
                {
                    b.HasOne("ProjectsAndTasks.Models.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectsAndTasks.Models.UserProject", b =>
                {
                    b.HasOne("ProjectsAndTasks.Models.Project", "Project")
                        .WithMany("UserProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectsAndTasks.Models.User", "User")
                        .WithMany("UserProjects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectsAndTasks.Models.UserTask", b =>
                {
                    b.HasOne("ProjectsAndTasks.Models.Task", "Task")
                        .WithMany("UserTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectsAndTasks.Models.User", "User")
                        .WithMany("UserTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskUser", b =>
                {
                    b.HasOne("ProjectsAndTasks.Models.Task", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectsAndTasks.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectsAndTasks.Models.Project", b =>
                {
                    b.Navigation("Tasks");

                    b.Navigation("UserProjects");
                });

            modelBuilder.Entity("ProjectsAndTasks.Models.Task", b =>
                {
                    b.Navigation("UserTasks");
                });

            modelBuilder.Entity("ProjectsAndTasks.Models.User", b =>
                {
                    b.Navigation("UserProjects");

                    b.Navigation("UserTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
